from collections import deque


def valid_move(maze, x, y):
    n = len(maze)
    return 0 <= x < n and 0 <= y < n and maze[x][y] != '#'


def shortest_path_in_maze(maze):
    n = len(maze)
    start = None
    for i in range(n):
        for j in range(n):
            if maze[i][j] == 'S':
                start = (i, j)
                break


    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    visited = set()
    queue = deque([(start, 0)])
    visited.add(start)

    while queue:
        (x, y), steps = queue.popleft()

        if maze[x][y] == 'E':
            return steps

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if valid_move(maze, nx, ny) and (nx, ny) not in visited:
                visited.add((nx, ny))
                queue.append(((nx, ny), steps + 1))

n = int(input())
maze = [input() for _ in range(n)]

result = shortest_path_in_maze(maze)
print(result)
