def dfs(graph, start, visited):
    visited[start] = True
    for neighbor in graph[start]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited)


def find_unreachable_nodes(N, edges, start):
    graph = {i: [] for i in range(1, N + 1)}

    for edge in edges:
        from_node, to_node = edge
        graph[from_node].append(to_node)

    visited = {i: False for i in range(1, N + 1)}
    dfs(graph, start, visited)

    unreachable_nodes = [node for node in range(1, N + 1) if not visited[node]]
    return unreachable_nodes


if __name__ == "__main__":
    N = int(input())
    M = int(input())
    edges = []
    for _ in range(M):
        from_node, to_node = map(int, input().split())
        edges.append((from_node, to_node))
    start = int(input())

    unreachable_outposts = find_unreachable_nodes(N, edges, start)
    print(" ".join(str(node) for node in unreachable_outposts))
